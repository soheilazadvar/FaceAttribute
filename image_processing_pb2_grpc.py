# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import image_processing_pb2 as image__processing__pb2


class ImageInputStub(object):
    """Service 1: Image Input Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessImage = channel.unary_unary(
                '/image_processing.ImageInput/ProcessImage',
                request_serializer=image__processing__pb2.ImageRequest.SerializeToString,
                response_deserializer=image__processing__pb2.CombinedResponse.FromString,
                )


class ImageInputServicer(object):
    """Service 1: Image Input Service
    """

    def ProcessImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageInputServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessImage': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessImage,
                    request_deserializer=image__processing__pb2.ImageRequest.FromString,
                    response_serializer=image__processing__pb2.CombinedResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'image_processing.ImageInput', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImageInput(object):
    """Service 1: Image Input Service
    """

    @staticmethod
    def ProcessImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/image_processing.ImageInput/ProcessImage',
            image__processing__pb2.ImageRequest.SerializeToString,
            image__processing__pb2.CombinedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FaceLandmarkDetectionStub(object):
    """Service 2: Face Landmark Detection Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectLandmarks = channel.unary_unary(
                '/image_processing.FaceLandmarkDetection/DetectLandmarks',
                request_serializer=image__processing__pb2.ImageRequest.SerializeToString,
                response_deserializer=image__processing__pb2.LandmarkResponse.FromString,
                )


class FaceLandmarkDetectionServicer(object):
    """Service 2: Face Landmark Detection Service
    """

    def DetectLandmarks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FaceLandmarkDetectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectLandmarks': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectLandmarks,
                    request_deserializer=image__processing__pb2.ImageRequest.FromString,
                    response_serializer=image__processing__pb2.LandmarkResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'image_processing.FaceLandmarkDetection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FaceLandmarkDetection(object):
    """Service 2: Face Landmark Detection Service
    """

    @staticmethod
    def DetectLandmarks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/image_processing.FaceLandmarkDetection/DetectLandmarks',
            image__processing__pb2.ImageRequest.SerializeToString,
            image__processing__pb2.LandmarkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AgeGenderEstimationStub(object):
    """Service 3: Age Gender Estimation Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EstimateAgeGender = channel.unary_unary(
                '/image_processing.AgeGenderEstimation/EstimateAgeGender',
                request_serializer=image__processing__pb2.ImageRequest.SerializeToString,
                response_deserializer=image__processing__pb2.AgeGenderResponse.FromString,
                )


class AgeGenderEstimationServicer(object):
    """Service 3: Age Gender Estimation Service
    """

    def EstimateAgeGender(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgeGenderEstimationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EstimateAgeGender': grpc.unary_unary_rpc_method_handler(
                    servicer.EstimateAgeGender,
                    request_deserializer=image__processing__pb2.ImageRequest.FromString,
                    response_serializer=image__processing__pb2.AgeGenderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'image_processing.AgeGenderEstimation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AgeGenderEstimation(object):
    """Service 3: Age Gender Estimation Service
    """

    @staticmethod
    def EstimateAgeGender(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/image_processing.AgeGenderEstimation/EstimateAgeGender',
            image__processing__pb2.ImageRequest.SerializeToString,
            image__processing__pb2.AgeGenderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DataStorageStub(object):
    """Service 4: Data Storage Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreData = channel.unary_unary(
                '/image_processing.DataStorage/StoreData',
                request_serializer=image__processing__pb2.StorageRequest.SerializeToString,
                response_deserializer=image__processing__pb2.StorageResponse.FromString,
                )


class DataStorageServicer(object):
    """Service 4: Data Storage Service
    """

    def StoreData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataStorageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StoreData': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreData,
                    request_deserializer=image__processing__pb2.StorageRequest.FromString,
                    response_serializer=image__processing__pb2.StorageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'image_processing.DataStorage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataStorage(object):
    """Service 4: Data Storage Service
    """

    @staticmethod
    def StoreData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/image_processing.DataStorage/StoreData',
            image__processing__pb2.StorageRequest.SerializeToString,
            image__processing__pb2.StorageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
